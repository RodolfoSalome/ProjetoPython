# -*- coding: utf-8 -*-
"""RID185846_Desafio06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UNC32JxCb60R3ZrOuexSNoPETRIbAKRu

# Etapa 01) Análise exploratória dos dados (Data Understanding)
"""

import numpy as np
import pandas as pd

from google.colab import files
upload = files.upload()

df = pd.read_csv("streaming_data.csv")
df.head()

df.info()

df.isna().sum()

"""# Etapa 02) Tratamento dos Dados (Data Preparation)"""

df['Time_on_platform'].fillna(0, inplace=True)
df['Num_streaming_services'].fillna(0, inplace=True)
df['Churned'].fillna(0, inplace=True)
df['Avg_rating'].fillna(0, inplace=True)
df['Devices_connected'].fillna(0, inplace=True)

df.isna().sum()

df.dropna(subset=['Gender'], inplace=True)
df.dropna(subset=['Subscription_type'], inplace=True)
df.dropna(subset=['Age'], inplace=True)

df.isna().sum()

df.replace({'Churned': {1: "Yes", 0: "No"}}, inplace=True)

df.head()

df.info()

df["Age"] = df["Age"].astype(int)
df["Time_on_platform"] = df["Time_on_platform"].astype(int)
df["Devices_connected"] = df["Devices_connected"].astype(int)
df["Num_streaming_services"] = df["Num_streaming_services"].astype(int)
df["Avg_rating"] = df["Avg_rating"].astype(int)

df.info()

"""# Etapa 03) Modelagem dos Dados - Regressão Logística"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

le.fit(df.Age)
df.Age = le.transform(df.Age)

le.fit(df.Gender)
df.Gender = le.transform(df.Gender)

le.fit(df.Time_on_platform)
df.Time_on_platform = le.transform(df.Time_on_platform)

le.fit(df.Devices_connected)
df.Devices_connected = le.transform(df.Devices_connected)

le.fit(df.Subscription_type)
df.Subscription_type = le.transform(df.Subscription_type)

le.fit(df.Num_streaming_services)
df.Num_streaming_services = le.transform(df.Num_streaming_services)

le.fit(df.Num_active_profiles)
df.Num_active_profiles = le.transform(df.Num_active_profiles)

le.fit(df.Avg_rating)
df.Avg_rating = le.transform(df.Avg_rating)

le.fit(df.Churned)
df.Churned = le.transform(df.Churned)

le.fit(df.User_id)
df.User_id = le.transform(df.User_id)

le.fit(df.Devices_connected)
df.Devices_connected = le.transform(df.Devices_connected)

df

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

x = df.iloc[:, :-1]
y = df[["Churned"]]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

model = LogisticRegression()
lr = model.fit(x_train, y_train)

predict = lr.predict(x)

x["prediction"] = predict
y_test = pd.DataFrame(y)
x["Conta cancelada"] = y["Churned"]

x.head()

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

cm = confusion_matrix(y_test, predict)

disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)

disp.plot()
plt.show()

"""# Etapa 04) Modelagem dos Dados - Tunning"""

from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeClassifier

arvore = DecisionTreeClassifier()

paramets = {
    "max_depth": [1,2,3,4,5,6,7,8,9,10],
}

grid_search = GridSearchCV(arvore, paramets, scoring="roc_auc", cv=5, n_jobs=-1)

grid_search.fit(x_train, y_train)

result = pd.DataFrame(grid_search.cv_results_)
result.sort_values(by="rank_test_score").head()

"""# Etapa 05) Modelagem dos Dados - Random Forest"""

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier()

parameters = {
    "max_depth": [1,2,3,4,5,6,7,8,9,10],
    "n_estimators": [100, 300, 500]
}

grid_search = GridSearchCV(rf, parameters, scoring="roc_auc", cv=5, n_jobs=-1)

grid_search.fit(x_train, y_train)

result = pd.DataFrame(grid_search.cv_results_)
result.sort_values(by="rank_test_score").head()

grid_search.best_estimator_.get_params()