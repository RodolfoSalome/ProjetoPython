# -*- coding: utf-8 -*-
"""RID185846_Desafio07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PtqgsmGFX5e5DZAcGHBv-GzbgCm1nJjB

# **Etapa 01) Análise exploratória dos dados**
"""

from google.colab import files
upload = files.upload()

from google.colab import files
upload = files.upload()

import pandas as pd
import numpy as np

df = pd.read_csv("data.csv", encoding='latin-1')

df.head()

df.describe()

df.info()

df.isna().sum()

df[df.duplicated(keep=False)]

df.plot.box();

df[df["UnitPrice"]<=0]

df[df["Quantity"]<=0]

"""# **Etapa 02) Pré-processamento dos dados**

**REMOVENDO DADOS NULOS**
"""

df.isna().sum()

df.dropna(subset=['CustomerID'], inplace=True)

df.isna().sum()

"""**REMOVENDO DADOS DUPLICADOS**"""

df.info()

df[df.duplicated(keep=False)]

df.drop_duplicates(inplace=True)

df.info()

"""**REMOVENDO VALORES ABAIXO DE ZERO NA COLUNAS "UNITPRICE" E "QUANTITY"**"""

df[df["UnitPrice"]<=0]

df[df["Quantity"]<=0]

df.drop(df[df["UnitPrice"]<=0].index, inplace=True)
df.drop(df[df["Quantity"]<=0].index, inplace=True)

df.info()

"""**REMOVENDO OUTLIERS**"""

df.plot.box();

df[df["Quantity"]>10000]

df[df["UnitPrice"]>5000]

df.drop(df[df["UnitPrice"]>10000].index, inplace=True)
df.drop(df[df["Quantity"]>5000].index, inplace=True)

df.plot.box();

df[df["UnitPrice"]>7500]

df.drop(df[df["UnitPrice"]>7500].index, inplace=True)

df.plot.box();

df.dtypes

"""**ALTERANDO TIPOS DE DADOS DAS COLUNAS "INVOICEDATE" E "CUSTOMERID"**"""

df["InvoiceDate"] = pd.to_datetime(df["InvoiceDate"])
df["CustomerID"] = df["CustomerID"].astype(int)

df.dtypes

"""**CRIANDO NOVA COLUNA "PREÇO_TOTAL" (UNITPRICE x QUANTITY)**"""

df.head()

df["preço_total"] = df["UnitPrice"] * df["Quantity"]

df.head()

df.info()

"""**CRIANDO VARIÁVEL "DATA" (SERÁ UTILIZADO NO CÁLCULO RFM)**"""

data = df["InvoiceDate"].max()
print(data)

"""**CÁLCULO RFM**"""

rfm = (
  df.groupby('CustomerID')
  .agg(
      R = ('InvoiceDate', lambda x: (data - x.max()).days),
      F = ('InvoiceNo', 'nunique'),
      M = ('preço_total', 'mean')
  )
)
rfm.head()

"""**REMOVENDO OUTLIERS DO RFM**"""

from sklearn.preprocessing import StandardScaler, scale
rfm.apply(scale).plot.box()

rfm.apply(scale).query('M>50')

df[df["CustomerID"]==15098]

rfm = rfm.drop(15098)

rfm.apply(scale).plot.box()

"""**NORMALIZANDO OS DADOS**"""

from sklearn.preprocessing import PowerTransformer
scaler = PowerTransformer()
rfm_scaled = pd.DataFrame(scaler.fit_transform(rfm), index=rfm.index, columns=rfm.columns)
rfm_scaled.head()

rfm_scaled.plot.box()

"""# **Etapa 03) Selecione um algoritmo de clusterização**

**UTILIZANDO KMEANS**
"""

from sklearn.cluster import KMeans, AgglomerativeClustering
from yellowbrick.cluster import kelbow_visualizer
kelbow_visualizer(KMeans(), rfm_scaled, k=10, timings=False)

"""**UTILIZANDO SILHOUETTE SCORE**"""

from sklearn.metrics import silhouette_score
cluster_metrics = [silhouette_score]
cluster_metrics_results = []
X = rfm_scaled.copy()

for k in range(2,11):
  model = KMeans(n_clusters=k, random_state=0)
  labels = model.fit_predict(X)
  cluster_results_dict = {'k': k}
  cluster_results_dict['inertia'] = model.inertia_
  for metric in cluster_metrics:
    cluster_results_dict[metric.__name__] = metric(X, labels)
  cluster_metrics_results.append(cluster_results_dict)

pd.DataFrame(cluster_metrics_results).set_index('k').style.background_gradient()

"""# **Etapa 04) Analise os clusters obtidos**"""

model = KMeans(n_clusters=4, random_state=0).fit(rfm_scaled)
centroids = model.cluster_centers_
labels = model.labels_

centroids

pd.DataFrame(centroids, columns = rfm_scaled.columns).T.add_prefix('GRUPO_').plot.bar(subplots = True, figsize = (10,10), legend = False);

from yellowbrick.cluster import kelbow_visualizer
(
  rfm_scaled.assign(cluster=labels)
  .groupby('cluster')
  .mean()
  .transpose()
  .style.background_gradient(cmap='YlOrRd', axis=1)
)

"""# **Etapa 05) Interpretação dos resultados obtidos**

**1. Descreva o perfil de compras dos clientes de cada cluster**

**R:**

       Cluster 0: Perfil de cliente que compra bastante com uma frequência relativamente alta.
       
       Cluster 1: Perfil de cliente que compra produtos caros por conta da pouquíssima frequência.

       Cluster 2: Perfil de cliente que compra bastante produto, porém, há bastante tempo que não realiza outra.

       Cluster 3: Perfil de cliente que compra bastante, porém, gasta pouco em seus produtos.

--------------------------------------------------------------------------------

**2. Justifique como essa análise pode ser útil para empresa para segmentação de seus clientes e personalização das campanhas de marketing**

**R:** Analisar e realizar a abordagem com os clientes para agregar positivamente para a empresa, dependendo do objetivo.

--------------------------------------------------------------------------------

**3. Sugira ações possíveis com base nas ações realizadas**

**R:**

       Cluster 0: Sem ações necessárias.
       
       Cluster 1: Identificar quais produtos chamam mais atenção e mostrar as variedades de cada um.

       Cluster 2: Realizar o contato, perguntando o motivo, pois pode ser desde da insatisfação com a empresa ou do produto, até a concorrência que pode estar chamando mais atenção.

       Cluster 3: Identificar quais produtos que os clientes estão comprando e oferecer outras variedades de valores mais altos que podem ter beneficios maiores.
"""